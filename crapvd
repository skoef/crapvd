#!/usr/bin/env python

from scapy.all import *
import yaml
import time
import logging
import os
import getopt

class CRApvD:
	def __init__(self, config):
		self.config = config
		self.prefixes = {}
		self.timers = {}
		self.prefixesMtime = 0
		self.routerFound = False
		self.keepRunning = True

		# set up logging
		self.logger = logging.getLogger('crapvd')
		# set log level
		self.logger.setLevel(logging.DEBUG if self.config['debugging'] is True else logging.INFO)
		formatter = logging.Formatter('%(asctime)s %(levelname)-8s %(message)s')
		if self.config['foreground'] is True:
			handler = logging.StreamHandler()
		else:
			handler = logging.FileHandler(self.config['logfile'])
		handler.setFormatter(formatter)
		self.logger.addHandler(handler)

		self.logger.info('starting crapvd')
		self.updatePrefixes()

	def run(self):
		self.logger.info('starting sniffing')
		sniff('icmp6', prn=self.sniffHandler, stop_filter=self.keepSniffing, store=0)
		self.logger.info('stopped sniffing')

	def keepSniffing(self, x):
		return not self.keepRunning

	def sniffHandler(self, packet):
		# router sollicitation
		if ICMPv6ND_RS in packet:
			rs_src = packet[IPv6][ICMPv6ND_RS].lladdr
			self.logger.info('received RS from %s', rs_src)
			# when running in automatic mode, wait for router config being detected
			# prior to responding to router solicitments
			if self.config['automatic'] is True and self.routerFound is False:
				self.logger.debug('ignoring RS from %s, running in automatic mode and no RA has been received yet' % rs_src)
			else:
				# drop timeout for address to below timeout
				self.timers[rs_src] = time.time() - (self.config['interval'] + 1)
				self.logger.debug('dropped timeout to %d for %s' % (self.timers[rs_src], rs_src))

		# when running in automatic mode, copy data found in first router advertisement
		# and start replying to received router solicitments from now on
		if ICMPv6ND_RA in packet and self.config['automatic'] is True and self.routerFound is False:
			self.routerFound = True
			self.config['srcll'] = packet[IPv6].src
			self.config['srcmac'] = packet[IPv6][ICMPv6ND_RA].lladdr
			self.logger.info('found RA from %s for %s, from now replying on RS' % (self.config['srcmac'], self.config['srcll']))

		# update prefixes list
		self.updatePrefixes()

		# asynchronously 'schedule' next round of sending directed RA's
		self.checkToSend()

	def checkToSend(self):
		timeout = (time.time() - self.config['interval'])
		for customer in self.prefixes:
			data = self.prefixes[customer]
			if data['macaddr'] not in self.timers:
				self.timers[data['macaddr']] = time.time()
				self.logger.debug('%s not found in timers, resetting' % data['macaddr'])
			elif self.timers[data['macaddr']] < timeout:
				self.logger.debug('timeout for %s: %d < %d, sending' % (data['macaddr'], self.timers[data['macaddr']], timeout))
				self.sendRA(data['macaddr'], data['prefix'])

	def sendRA(self, macaddr, prefix):
		self.logger.info('sending prefix %s to address %s' % (prefix, macaddr))
		# ethernet frame
		ether = Ether(src=self.config['srcmac'], dst=macaddr)
		# IPv6 packet
		# in which we forge the source link local address
		ip6 = IPv6(src=self.config['srcll'])
		# make packet an RA
		ra = ICMPv6ND_RA(chlim=64, routerlifetime=(self.config['interval'] * 3), prf=0)
		# forge source mac address
		src = ICMPv6NDOptSrcLLAddr(lladdr=self.config['srcmac'])
		# set right prefix data
		preinf = ICMPv6NDOptPrefixInfo(validlifetime=2592000, preferredlifetime=604800)
		preinf.prefix = prefix.split('/')[0]
		preinf.prefixlen = int(prefix.split('/')[1])
		try:
			# glue parts together and send it
			if sendp(ether/ip6/ra/src/preinf, iface=self.config['interface']) is None:
				self.logger.debug('sent successful, resetting timer for %s' % macaddr)
				self.timers[macaddr] = time.time()
		except socket.error, e:
			self.logger.error('error sending RA: %s' % str(e))
			self.keepRunning = False

	def updatePrefixes(self):
		try:
			# only update when prefix file was modified
			mtime = os.path.getmtime(self.config['prefixfile'])
			if mtime <= self.prefixesMtime:
				return

			# don't log the first time
			if self.prefixesMtime != 0:
				self.logger.info('prefixes file %s updated, reloading' % self.config['prefixfile'])

			self.prefixesMtime = mtime
			# read YAML
			file = open(self.config['prefixfile'], 'r')
			prefixes = yaml.load(file)
			if not prefixes:
				self.logger.warning('no prefixes could be found in %s' % self.config['prefixfile'])
				return

			# copy new data
			self.prefixes = prefixes
			self.logger.info('%d prefixes loaded from %s' % (len(self.prefixes), self.config['prefixfile']))
		except OSError, e:
			self.logger.error('prefixes file %s not found' % self.config['prefixfile'])
			self.keepRunning = False

def daemonize (stdin='/dev/null', stdout='/dev/null', stderr='/dev/null'):
	# Do first fork.
	try:
		pid = os.fork()
		if pid > 0:
			sys.exit(0)   # Exit first parent.
	except OSError, e:
		sys.stderr.write("fork #1 failed: (%d) %s\n" % (e.errno, e.strerror))
		sys.exit(1)

	# Decouple from parent environment.
	os.chdir("/")
	os.umask(0)
	os.setsid()

	# Do second fork.
	try:
		pid = os.fork()
		if pid > 0:
			try:
				# write pid file
				f = open('/var/run/crapvd.pid', 'w')
				f.write(str(pid))
				f.close()
			except IOError, e:
				sys.stderr.write("could not write pid to file: (%d) %s\n" % (e.errno, e.strerror))
				sys.exit(1)   # Exit second parent.
			sys.exit(0)   # Exit second parent.
	except OSError, e:
		sys.stderr.write("fork #2 failed: (%d) %s\n" % (e.errno, e.strerror))
		sys.exit(1)

	# daemonizing succeeded
	# Redirect standard file descriptors.
	si = open(stdin, 'r')
	so = open(stdout, 'a+')
	se = open(stderr, 'a+', 0)
	os.dup2(si.fileno(), sys.stdin.fileno())
	os.dup2(so.fileno(), sys.stdout.fileno())
	os.dup2(se.fileno(), sys.stderr.fileno())

def usage():
	print """Usage: %s -s srcll -m srcmac [-i interval] [-c prefixesfile] [-l logfile] [-f] [-d] [-a] [-h]

	-s ip6address  : link-local address for real gateway          [required]
	-m macaddress  : mac-address of link-local address            [required]
	-i seconds     : approximate interval advertisements are sent [default=60]
	-c file        : YAML file containing prefixes                [default=/etc/prefixes.yaml]
	-l file        : log file                                     [default=/var/log/crapvd.log]
	-f             : don't detach from foreground
	-d             : show debugging messages
	-a             : crapvd will listen for RA from the real router
	                 both -m and -s will be ignored
	-h             : show this help message
	""" % os.path.basename(sys.argv[0])

if __name__ == '__main__':
	# defaults
	config = {
		'interval': 60,
		'logfile': '/var/log/crapvd.log',
		'prefixfile': '/etc/prefixes.yaml',
		'automatic': False,
		'foreground': False,
		'debugging': False
	}

	# parse options
	try:
		opts, args = getopt.getopt(sys.argv[1:], 'i:s:m:t:c:l:fdah', [])
	except getopt.GetoptError, e:
		print str(e)
		sys.exit(2)

	for o, a in opts:
		if o == '-i':
			config['interface'] = a
		elif o == '-s':
			config['srcll'] = a
		elif o == '-m':
			config['srcmac'] = a
		elif o == '-t':
			config['interval'] = int(a)
		elif o == '-c':
			config['prefixfile'] = a
		elif o == '-l':
			config['logfile'] = a
		elif o == '-f':
			config['foreground'] = True
		elif o == '-d':
			config['debugging'] = True
		elif o == '-a':
			config['automatic'] = True
		elif o == '-h':
			usage()
			sys.exit(0)
		else:
			print "Error: unknown option %s" % o
			usage()
			sys.exit(2)

	# check for required parameters
	if 'interface' not in config:
		print "Error: -i is required"
		usage()
		sys.exit(2)

	if ('srcmac' not in config or 'srcll' not in config) and config['automatic'] is False:
		print "Error: either -a or -s and -m are required"
		usage()
		sys.exit(2)

	# detach from foreground
	if config['foreground'] is False:
		daemonize()

	# start daemon
	c = CRApvD(config)
	c.run()
